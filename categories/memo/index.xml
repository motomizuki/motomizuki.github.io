<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memo on motomizuki blog</title>
    <link>http://motomizuki.github.io/categories/memo/</link>
    <description>Recent content in Memo on motomizuki blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 20 May 2015 23:49:04 +0900</lastBuildDate>
    <atom:link href="http://motomizuki.github.io/categories/memo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sqlalchemy_update_20150520</title>
      <link>http://motomizuki.github.io/blog/2015/05/20/sqlalchemy_update_20150520/</link>
      <pubDate>Wed, 20 May 2015 23:49:04 +0900</pubDate>
      
      <guid>http://motomizuki.github.io/blog/2015/05/20/sqlalchemy_update_20150520/</guid>
      <description>

&lt;h1 id=&#34;概要:ab29909ef1624f319953bc652660642e&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;ノイズのある&lt;code&gt;dictionary&lt;/code&gt;データからSQLAlchemyを使って簡単にupdateしたい。
フォームからデータを受け取るとModelに必要のないデータも含まれてしまうことがある。
そういったものをいちいち指定せずによしなにupdateを行えるようにする。&lt;/p&gt;

&lt;h1 id=&#34;通常のupdateの方法:ab29909ef1624f319953bc652660642e&#34;&gt;通常のupdateの方法&lt;/h1&gt;

&lt;p&gt;通常のupdateは次のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stmt = Users.update().\
            where(Users.id==5).\
            values(name=&#39;user #5&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;user = Users.query.filter_by(id=5).first()
user.name=&amp;quot;hoge&amp;quot;
db.session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;今回の方法:ab29909ef1624f319953bc652660642e&#34;&gt;今回の方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;setattr(obj, key, value)&lt;/code&gt;を使っていく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Users(db.Model):
    id = db.Column(db.Integer, primarykey=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    password = db.Column(db.String(100), nullable=False)

    def __init__(self, id, name, password):
        self.id = user_id
        self.name = name
        self.password = password

    def update_dict(dict):
        for name, value in dict.items():
            if name in self.__dict__:
                setattr(self, name, value)


# 更新操作
dict = {&amp;quot;name&amp;quot;; hoge, &amp;quot;password&amp;quot;:fuga}
user=Users.query.filter_by(id=5).first()
user.update_form(dict)
db.session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じの&lt;code&gt;update_dict&lt;/code&gt;をモデルに実装すると、
&lt;code&gt;dictionary&lt;/code&gt;を無造作に入れても、定義されている値のみが変更され、
データの更新が行われるので楽。
フォームをモデルに合うように作るだけで、データの追加更新を簡単に実装できるようになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>intel_start_20150502</title>
      <link>http://motomizuki.github.io/blog/2015/05/02/intel_start_20150502/</link>
      <pubDate>Sat, 02 May 2015 01:45:13 +0900</pubDate>
      
      <guid>http://motomizuki.github.io/blog/2015/05/02/intel_start_20150502/</guid>
      <description>

&lt;h1 id=&#34;概要:1b5e181266a082df79f13dab2f943bfc&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;Intel Edison Ardino Kit を購入したので、
箱を開けてからセットアップするまでのメモ
&lt;a href=&#34;https://software.intel.com/en-us/iot/library/edison-getting-started&#34;&gt;Intelの出してるチュートリアル参照&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;組み立て:1b5e181266a082df79f13dab2f943bfc&#34;&gt;組み立て&lt;/h1&gt;

&lt;p&gt;Edisonさんをボードのピンにさして、ちっちゃなナットを締めるだけ。ナットは本当に小さいので無くさないように。ビスを締める際は奥側のビスを強めに締めるといいかも。対角線でしか固定されないので、チップが湾曲してボードと微妙な隙間ができて電源が付かなかった。。
&lt;img src=&#34;http://i.gyazo.com/17106a4f8fe140690535b19aad91776d.png&#34; alt=&#34;img&#34; /&gt;

あとは4つの足を付けて組み立て完成。&lt;/p&gt;

&lt;h1 id=&#34;セットアップ:1b5e181266a082df79f13dab2f943bfc&#34;&gt;セットアップ&lt;/h1&gt;

&lt;h2 id=&#34;ログイン確認:1b5e181266a082df79f13dab2f943bfc&#34;&gt;ログイン確認&lt;/h2&gt;

&lt;p&gt;J18(usb給電)とJ3(usb接続)にmicro USBをさすとPCと接続できる。チュートリル通りに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen /dev/cu.usbserial-XXXXXXXX 115200 -L
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とやってEnterを2回押してログインできる。
login name は root　で初回のパスワードは無し！&lt;/p&gt;

&lt;h2 id=&#34;ファームウェアのアップデート:1b5e181266a082df79f13dab2f943bfc&#34;&gt;ファームウェアのアップデート&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Configure Username and Password&lt;/strong&gt;の最初に&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Flash your Firmware to get the latest features and important updates.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるので最新イメージをEdisonに書き込む。最新イメージは&lt;a href=&#34;http://www.intel.com/support/edison/sb/CS-035180.html&#34;&gt;公式サイト&lt;/a&gt;で落とせるYocto complete image&lt;/p&gt;

&lt;p&gt;既存のファイル、フォルダを削除してダウンロードしたファイルを全部Edisonディレクトリに移す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf /Volumes/Edison/*
rm -rf /Volumes/Edison/\.*
cp ~/Downloads/edison-image-ww05-15/* /Volumes/Edison/.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;screen&lt;/code&gt;でEdisonに入り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reboot ota
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でアップデートが完了する。
reboot中に電源が落ちないよう注意する。&lt;/p&gt;

&lt;h2 id=&#34;edisonのセットアップ:1b5e181266a082df79f13dab2f943bfc&#34;&gt;Edisonのセットアップ&lt;/h2&gt;

&lt;p&gt;Edisonに入ってから&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configure_edison --setup 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期設定をしていく。
設定項目はrootのパスワードと, edisonの名前(host名),
使用するwifi。
設定後にedisonの名前で\&lt;a href=&#34;http://host.local`でEdisonのwebサーバにアクセスできる。sshも&#34;&gt;http://host.local`でEdisonのwebサーバにアクセスできる。sshも&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh root@host.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で利用可能になり、USBでつながなくてもEdisonを操作できるようになる。ただsshよりもシリアル接続の方がレスポンスがいいのでストレスは少ないかも。&lt;/p&gt;

&lt;h1 id=&#34;lチカ:1b5e181266a082df79f13dab2f943bfc&#34;&gt;Lチカ&lt;/h1&gt;

&lt;p&gt;Hello world!的な存在らしいLチカをためしてみた。
&lt;img src=&#34;http://i.gyazo.com/d4ef680f9f68133d498d8a37dd93f93f.png&#34; alt=&#34;img&#34; /&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int led = 13;

void setup() {
    // put your setup code here,  to run once:
    pinMode(led, OUTPUT);
}

void loop() {
    // put your main code here,  to run repeatedly:
    digitalWrite(led, HIGH);
    delay(1000);
    digitalWrite(led,  LOW);
    delay(1000);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>distcp_20150416</title>
      <link>http://motomizuki.github.io/blog/2015/04/16/distcp_20150416/</link>
      <pubDate>Thu, 16 Apr 2015 23:49:14 +0900</pubDate>
      
      <guid>http://motomizuki.github.io/blog/2015/04/16/distcp_20150416/</guid>
      <description>

&lt;h2 id=&#34;目的:a0ed70356740ff40d5d679d15c824608&#34;&gt;目的&lt;/h2&gt;

&lt;p&gt;Hadoopサーバを更新するにあたってファイルを引越しする。旧サーバはCDH4で新サーバはCDH5で構成されて、ファイルをローカルに落とすことなく直接hdfsにコピーしたい。&lt;/p&gt;

&lt;h2 id=&#34;はまったところ:a0ed70356740ff40d5d679d15c824608&#34;&gt;はまったところ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;バージョンが違うためにhdfsプロトコルではエラーが発生&lt;/li&gt;
&lt;li&gt;ワイルドカードでのファイル指定ができない&lt;/li&gt;
&lt;li&gt;ユーザフォルダじゃない場所にコピーするのでpermissionエラーが発生&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解決策:a0ed70356740ff40d5d679d15c824608&#34;&gt;解決策&lt;/h2&gt;

&lt;h3 id=&#34;バージョンが違うためにhdfsプロトコルではエラーが発生:a0ed70356740ff40d5d679d15c824608&#34;&gt;バージョンが違うためにhdfsプロトコルではエラーが発生&lt;/h3&gt;

&lt;p&gt;通常は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hadoop distcp hdfs://FROM_HOST/filedir hdfs://TO_HOST/firedire
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でコピーが行われるのだが、バージョンが異なるとエラーが発生する。&lt;/p&gt;

&lt;p&gt;そこで、コピー先(TO_HOST)にsshして以下のコマンドを実行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hadoop distcp hftp://FROM_HOST/filedir hdfs://TO_HOST/firedire
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クラスター同士のバージョンが違う場合はfromのプロトコルをhdfsからhftpもしくはwebhdfsに変更するとコピーができる。&lt;/p&gt;

&lt;h3 id=&#34;ワイルドカードでのファイル指定ができない:a0ed70356740ff40d5d679d15c824608&#34;&gt;ワイルドカードでのファイル指定ができない&lt;/h3&gt;

&lt;p&gt;数百のファイルをコピーする必要があったのだが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hadoop distcp hftp://FROM_HOST/hoge/*.log hdfs://TO_HOST/hoge/.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにワイルドカード(*)を利用するとそんなファイルはないと怒られる。
そこで、コピー元のサーバのhdfsからコピーするファイルのリストを作成する必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hadoop fs -ls hdfs:///hoge/ | grep -e *.log | awk &#39;{gsub(&amp;quot;hdfs&amp;quot;, &amp;quot;hftp&amp;quot;);gsub(&amp;quot;///&amp;quot;, &amp;quot;//FROM_HOST/&amp;quot;);print $8&#39;}   &amp;gt; input-files.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このinput-files.txtをTO_HOSTにもっていき以下を実行でこぴーができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hadoop fs -put input-files.txt  .
hadoop distcp -f input-files.txt hdfs://TO_HOST/hoge/.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ユーザフォルダじゃない場所にコピーするのでpermissionエラーが発生:a0ed70356740ff40d5d679d15c824608&#34;&gt;ユーザフォルダじゃない場所にコピーするのでpermissionエラーが発生&lt;/h3&gt;

&lt;p&gt;次のコマンドでpermissionを変更&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u hdfs hadoop fs -chmod -R 777 /hoge
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HugoDeploy</title>
      <link>http://motomizuki.github.io/blog/2015/02/28/hugodeploy/</link>
      <pubDate>Sat, 28 Feb 2015 11:46:32 +0900</pubDate>
      
      <guid>http://motomizuki.github.io/blog/2015/02/28/hugodeploy/</guid>
      <description>

&lt;p&gt;このブログを作るにあたって行ったことのメモ&lt;/p&gt;

&lt;h2 id=&#34;ブログ構成:2ce0096fa06c19633af18875afd48bcb&#34;&gt;ブログ構成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;エンジン : Hugo&lt;/li&gt;
&lt;li&gt;ホスティングサービス : GitHub Page&lt;/li&gt;
&lt;li&gt;CIサービス : Wercker&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;流れ:2ce0096fa06c19633af18875afd48bcb&#34;&gt;流れ&lt;/h2&gt;

&lt;p&gt;基本的には&lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;Hugo&lt;/a&gt;のドキュメント通り.
自動デプロイに関しても&lt;a href=&#34;http://gohugo.io/tutorials/automated-deployments/&#34;&gt;Automated deployments&lt;/a&gt;通り.&lt;/p&gt;

&lt;h3 id=&#34;hugoのインストール:2ce0096fa06c19633af18875afd48bcb&#34;&gt;Hugoのインストール&lt;/h3&gt;

&lt;p&gt;GitHubの&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;リポジトリ&lt;/a&gt;から直接入手&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Macの場合はbrewでインストール可能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ブログを作成:2ce0096fa06c19633af18875afd48bcb&#34;&gt;ブログを作成&lt;/h3&gt;

&lt;h4 id=&#34;本体の作成:2ce0096fa06c19633af18875afd48bcb&#34;&gt;本体の作成&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ hugo new site blog.motomizuki
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下は&lt;code&gt;blog.motomizuki&lt;/code&gt;内での作業&lt;/p&gt;

&lt;h4 id=&#34;コンテンツの作成:2ce0096fa06c19633af18875afd48bcb&#34;&gt;コンテンツの作成&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;記事の作成:2ce0096fa06c19633af18875afd48bcb&#34;&gt;記事の作成&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ hugo new post/title.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdownの基本テンプレートは&lt;code&gt;archetypes&lt;/code&gt;内の&lt;code&gt;default.md&lt;/code&gt;が適用される&lt;/p&gt;

&lt;h4 id=&#34;ブログにテーマ-hyde-x-を適用:2ce0096fa06c19633af18875afd48bcb&#34;&gt;ブログにテーマ(hyde-x)を適用&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/zyro/hyde-x
$ hugo -t hyde-x
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ブログのpreview:2ce0096fa06c19633af18875afd48bcb&#34;&gt;ブログのpreview&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ hugo server --theme=ThemaName --buildDraft
2 pages created
0 tags created
0 categories created
in 5 ms
Serving pages from exampleHugoSite/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドで使用するテーマをThemaNameで設定&lt;/p&gt;

&lt;p&gt;ブログを編集しながら確認したい場合は&lt;code&gt;--watch&lt;/code&gt;を付ける&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ hugo server --theme=ThemaName --buildDrafts --watch
2 pages created
0 tags created
0 categories created
in 5 ms
Watching for changes in exampleHugoSite/content
Serving pages from exampleHugoSite/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;werckerでgithub-pagesへ自動デプロイ:2ce0096fa06c19633af18875afd48bcb&#34;&gt;WerckerでGitHub Pagesへ自動デプロイ&lt;/h3&gt;

&lt;p&gt;Werckerを使い，ブログソースを&lt;code&gt;git push&lt;/code&gt;したら
GitHub Pages(&lt;a href=&#34;https://username.github.io)に自動デプロイ&#34;&gt;https://username.github.io)に自動デプロイ&lt;/a&gt;
するようにする．&lt;/p&gt;

&lt;h4 id=&#34;gitの設定:2ce0096fa06c19633af18875afd48bcb&#34;&gt;gitの設定&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動デプロイの際に&lt;strong&gt;public&lt;/strong&gt;ディレクトリが自動生成されるので,
既存の&lt;strong&gt;public&lt;/strong&gt;はgitで管理しない.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ echo &amp;quot;/public&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;空のディレクトリがあるとWerckerに警告されるので，staticディレクトリ内に
とりあえず&lt;code&gt;rbots.txt&lt;/code&gt;を置いておく．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;echo &amp;quot;User-agent: *\nDisallow:&amp;quot; &amp;gt; static/robots.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;githubのプロジェクトに追加:2ce0096fa06c19633af18875afd48bcb&#34;&gt;GitHubのプロジェクトに追加&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git remote add origin git@github.com:motomizuki/blog.motomizuki.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;github-pages用リポジトリを用意:2ce0096fa06c19633af18875afd48bcb&#34;&gt;GitHub Pages用リポジトリを用意&lt;/h4&gt;

&lt;p&gt;username.github.ioというリポジトリを作成.&lt;/p&gt;

&lt;h4 id=&#34;werckerの設定:2ce0096fa06c19633af18875afd48bcb&#34;&gt;Werckerの設定&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;のアカウントをREGISTER USING GITHUBから作成.
APPを作成し必要な項目を埋ていく，&lt;strong&gt;Configure access&lt;/strong&gt;ではwithout using an SSHを選択する.
APPのビルド，デプロイ設定を&lt;strong&gt;Wercker.yml&lt;/strong&gt;で記述し, リポジトリ(blog.motomizuki)に追加する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Wercker.yml&#34;&gt;box: wercker/default
build:
    steps:
        - arjen/hugo-build@1.0.2:
            theme: hyde-x
            flags: --buildDrafts=true
deploy:
    steps:
        - lukevivier/gh-pages@0.2.1:
            token: $GIT_TOKEN
            basedir: public
            repo: motomizuki/motomizuki.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;インデントは半角スペース4つで！&lt;/em&gt;&lt;/strong&gt;
repoでデプロイ先のリポジトリを設定しないと上手く動かなかった.
ビルド, デプロイも成功となるが，実際にリポジトリは更新されないという状況.&lt;/p&gt;

&lt;h4 id=&#34;appの設定:2ce0096fa06c19633af18875afd48bcb&#34;&gt;APPの設定&lt;/h4&gt;

&lt;p&gt;SettingのDEPLOY TARGETSをcustomに．
Add new variableでnameをGIT_TOKEN, valueはGitHubのPersonal access tokensでgenerateできる文字列にして登録．&lt;/p&gt;

&lt;h3 id=&#34;終わり:2ce0096fa06c19633af18875afd48bcb&#34;&gt;終わり&lt;/h3&gt;

&lt;p&gt;ここまで設定すると記事を書いてソースをpushすると自動でデプロイされる．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
